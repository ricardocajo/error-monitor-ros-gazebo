if __name__ == '__main__':
    try:
        rospy.init_node('{{ file_prefix }}')
        {% set timeSync_args = [] -%}
        {% for sub in subscribers -%}
        {{ sub.sub_name }}_sub = message_filters.Subscriber('{{ sub.topic }}', {{ sub.msgtype }})
        {% do timeSync_args.append(sub.sub_name + '_sub') -%}
        {% endfor -%}
        time_sync = message_filters.ApproximateTimeSynchronizer([{{ timeSync_args | join(',') }}], queue_size=1, slop=0.1, allow_headerless=True)
        time_sync.registerCallback(fetch_state)
        state, save_states = {}, []
        rate, timeout, start_time = rospy.Rate({{ rate }}), {{ timeout }}, rospy.get_time()
        {% if eventually > 0 -%}
        eventually = {{'{'}}{% for prop in properties -%}{% if not loop.index == 1 -%},{% endif -%}{% for event in prop.comparisons[5][0] -%}{% if not loop.index == 1 -%},{% endif -%}'{{ event.var }}': [False,'{{'{0}'}}Error at line {{ prop.line }}:{{'{1}'}}\n {{ prop.comparisons[1] }}\n{{'{2}'}}Failing state:{{'{3}'}}\n    {% for var in prop.comparisons[2] -%}{% set index = loop.index+3 -%}{{var}}: {{'{'}}{{index}}{{'}'}}\n    {% endfor -%}'.format(Fore.BLUE,Style.RESET_ALL,Fore.RED,Style.RESET_ALL{% for var in prop.comparisons[3] -%},''{% endfor -%})]{% endfor -%}{% for event in prop.comparisons[5][2] -%},'{{ event.var }}': [False,{{ event.err }}]{% endfor -%}{% endfor -%}{{'}'}}
        {% endif -%}
        while not rospy.is_shutdown():
            passed_time = rospy.get_time() - start_time
            if passed_time > timeout:
                {% if is_after_or -%}
                for key, value in eventually.items():
                    if 'after' in key:
                        for key2, value2 in eventually.items():
                                if key2 in key and not 'aux' in key2:
                                    eventually[key2][0] = not value[0] or value2[0]
                {% endif -%}
                {% if eventually > 0 -%}
                for key, (bool_, err) in eventually.items():
                    if not 'aux' in key and not bool_:
                        raise rospy.exceptions.ROSInterruptException(err)
                {% endif -%}
                raise rospy.exceptions.ROSInterruptException('Timeout reached. Simulation ended without breaking any property.')
            update_state()
            {% if eventually > 0 -%}
            verify_properties(save_states[:],eventually)
        {% else -%}
            verify_properties(save_states[:])
        {% endif -%}
        rospy.spin()
    except rospy.ROSInterruptException as e:
        print(e)
    finally:
        pass
