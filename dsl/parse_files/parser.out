Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> opargs
Rule 1     opargs -> operator
Rule 2     opargs -> comparison
Rule 3     operator -> ALWAYS ( opargs )
Rule 4     operator -> EVENTUALLY ( opargs )
Rule 5     operator -> NOT ( opargs )
Rule 6     operator -> ( opargs ) UNTIL ( opargs )
Rule 7     operator -> ( opargs ) IMPLIES ( opargs )
Rule 8     operator -> ( opargs ) AND ( opargs )
Rule 9     operator -> ( opargs ) OR ( opargs )
Rule 10    comparison -> func opbin FLOAT
Rule 11    comparison -> FLOAT opbin func
Rule 12    comparison -> func opbin func
Rule 13    opbin -> +
Rule 14    opbin -> -
Rule 15    opbin -> >
Rule 16    opbin -> <
Rule 17    opbin -> *
Rule 18    opbin -> /
Rule 19    opbin -> GTE
Rule 20    opbin -> LEE
Rule 21    opbin -> EQ
Rule 22    opbin -> DIF
Rule 23    func -> POSITION_X NAME
Rule 24    func -> POSITION_Y NAME
Rule 25    func -> ORIENTATION NAME
Rule 26    func -> VELOCITY NAME
Rule 27    func -> LOCALIZATION_ERROR NAME
Rule 28    func -> DISTANCE NAME NAME

Terminals, with rules where they appear

(                    : 3 4 5 6 6 7 7 8 8 9 9
)                    : 3 4 5 6 6 7 7 8 8 9 9
*                    : 17
+                    : 13
-                    : 14
/                    : 18
<                    : 16
>                    : 15
ALWAYS               : 3
AND                  : 8
DIF                  : 22
DISTANCE             : 28
EQ                   : 21
EVENTUALLY           : 4
FLOAT                : 10 11
GTE                  : 19
IMPLIES              : 7
LEE                  : 20
LOCALIZATION_ERROR   : 27
NAME                 : 23 24 25 26 27 28 28
NOT                  : 5
OR                   : 9
ORIENTATION          : 25
POSITION_X           : 23
POSITION_Y           : 24
UNTIL                : 6
VELOCITY             : 26
error                : 

Nonterminals, with rules where they appear

comparison           : 2
func                 : 10 11 12 12
opargs               : 3 4 5 6 6 7 7 8 8 9 9 0
opbin                : 10 11 12
operator             : 1

Parsing method: LALR

state 0

    (0) S' -> . opargs
    (1) opargs -> . operator
    (2) opargs -> . comparison
    (3) operator -> . ALWAYS ( opargs )
    (4) operator -> . EVENTUALLY ( opargs )
    (5) operator -> . NOT ( opargs )
    (6) operator -> . ( opargs ) UNTIL ( opargs )
    (7) operator -> . ( opargs ) IMPLIES ( opargs )
    (8) operator -> . ( opargs ) AND ( opargs )
    (9) operator -> . ( opargs ) OR ( opargs )
    (10) comparison -> . func opbin FLOAT
    (11) comparison -> . FLOAT opbin func
    (12) comparison -> . func opbin func
    (23) func -> . POSITION_X NAME
    (24) func -> . POSITION_Y NAME
    (25) func -> . ORIENTATION NAME
    (26) func -> . VELOCITY NAME
    (27) func -> . LOCALIZATION_ERROR NAME
    (28) func -> . DISTANCE NAME NAME

    ALWAYS          shift and go to state 4
    EVENTUALLY      shift and go to state 6
    NOT             shift and go to state 7
    (               shift and go to state 5
    FLOAT           shift and go to state 9
    POSITION_X      shift and go to state 10
    POSITION_Y      shift and go to state 11
    ORIENTATION     shift and go to state 12
    VELOCITY        shift and go to state 13
    LOCALIZATION_ERROR shift and go to state 14
    DISTANCE        shift and go to state 15

    opargs                         shift and go to state 1
    operator                       shift and go to state 2
    comparison                     shift and go to state 3
    func                           shift and go to state 8

state 1

    (0) S' -> opargs .



state 2

    (1) opargs -> operator .

    $end            reduce using rule 1 (opargs -> operator .)
    )               reduce using rule 1 (opargs -> operator .)


state 3

    (2) opargs -> comparison .

    $end            reduce using rule 2 (opargs -> comparison .)
    )               reduce using rule 2 (opargs -> comparison .)


state 4

    (3) operator -> ALWAYS . ( opargs )

    (               shift and go to state 16


state 5

    (6) operator -> ( . opargs ) UNTIL ( opargs )
    (7) operator -> ( . opargs ) IMPLIES ( opargs )
    (8) operator -> ( . opargs ) AND ( opargs )
    (9) operator -> ( . opargs ) OR ( opargs )
    (1) opargs -> . operator
    (2) opargs -> . comparison
    (3) operator -> . ALWAYS ( opargs )
    (4) operator -> . EVENTUALLY ( opargs )
    (5) operator -> . NOT ( opargs )
    (6) operator -> . ( opargs ) UNTIL ( opargs )
    (7) operator -> . ( opargs ) IMPLIES ( opargs )
    (8) operator -> . ( opargs ) AND ( opargs )
    (9) operator -> . ( opargs ) OR ( opargs )
    (10) comparison -> . func opbin FLOAT
    (11) comparison -> . FLOAT opbin func
    (12) comparison -> . func opbin func
    (23) func -> . POSITION_X NAME
    (24) func -> . POSITION_Y NAME
    (25) func -> . ORIENTATION NAME
    (26) func -> . VELOCITY NAME
    (27) func -> . LOCALIZATION_ERROR NAME
    (28) func -> . DISTANCE NAME NAME

    ALWAYS          shift and go to state 4
    EVENTUALLY      shift and go to state 6
    NOT             shift and go to state 7
    (               shift and go to state 5
    FLOAT           shift and go to state 9
    POSITION_X      shift and go to state 10
    POSITION_Y      shift and go to state 11
    ORIENTATION     shift and go to state 12
    VELOCITY        shift and go to state 13
    LOCALIZATION_ERROR shift and go to state 14
    DISTANCE        shift and go to state 15

    opargs                         shift and go to state 17
    operator                       shift and go to state 2
    comparison                     shift and go to state 3
    func                           shift and go to state 8

state 6

    (4) operator -> EVENTUALLY . ( opargs )

    (               shift and go to state 18


state 7

    (5) operator -> NOT . ( opargs )

    (               shift and go to state 19


state 8

    (10) comparison -> func . opbin FLOAT
    (12) comparison -> func . opbin func
    (13) opbin -> . +
    (14) opbin -> . -
    (15) opbin -> . >
    (16) opbin -> . <
    (17) opbin -> . *
    (18) opbin -> . /
    (19) opbin -> . GTE
    (20) opbin -> . LEE
    (21) opbin -> . EQ
    (22) opbin -> . DIF

    +               shift and go to state 21
    -               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    *               shift and go to state 25
    /               shift and go to state 26
    GTE             shift and go to state 27
    LEE             shift and go to state 28
    EQ              shift and go to state 29
    DIF             shift and go to state 30

    opbin                          shift and go to state 20

state 9

    (11) comparison -> FLOAT . opbin func
    (13) opbin -> . +
    (14) opbin -> . -
    (15) opbin -> . >
    (16) opbin -> . <
    (17) opbin -> . *
    (18) opbin -> . /
    (19) opbin -> . GTE
    (20) opbin -> . LEE
    (21) opbin -> . EQ
    (22) opbin -> . DIF

    +               shift and go to state 21
    -               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    *               shift and go to state 25
    /               shift and go to state 26
    GTE             shift and go to state 27
    LEE             shift and go to state 28
    EQ              shift and go to state 29
    DIF             shift and go to state 30

    opbin                          shift and go to state 31

state 10

    (23) func -> POSITION_X . NAME

    NAME            shift and go to state 32


state 11

    (24) func -> POSITION_Y . NAME

    NAME            shift and go to state 33


state 12

    (25) func -> ORIENTATION . NAME

    NAME            shift and go to state 34


state 13

    (26) func -> VELOCITY . NAME

    NAME            shift and go to state 35


state 14

    (27) func -> LOCALIZATION_ERROR . NAME

    NAME            shift and go to state 36


state 15

    (28) func -> DISTANCE . NAME NAME

    NAME            shift and go to state 37


state 16

    (3) operator -> ALWAYS ( . opargs )
    (1) opargs -> . operator
    (2) opargs -> . comparison
    (3) operator -> . ALWAYS ( opargs )
    (4) operator -> . EVENTUALLY ( opargs )
    (5) operator -> . NOT ( opargs )
    (6) operator -> . ( opargs ) UNTIL ( opargs )
    (7) operator -> . ( opargs ) IMPLIES ( opargs )
    (8) operator -> . ( opargs ) AND ( opargs )
    (9) operator -> . ( opargs ) OR ( opargs )
    (10) comparison -> . func opbin FLOAT
    (11) comparison -> . FLOAT opbin func
    (12) comparison -> . func opbin func
    (23) func -> . POSITION_X NAME
    (24) func -> . POSITION_Y NAME
    (25) func -> . ORIENTATION NAME
    (26) func -> . VELOCITY NAME
    (27) func -> . LOCALIZATION_ERROR NAME
    (28) func -> . DISTANCE NAME NAME

    ALWAYS          shift and go to state 4
    EVENTUALLY      shift and go to state 6
    NOT             shift and go to state 7
    (               shift and go to state 5
    FLOAT           shift and go to state 9
    POSITION_X      shift and go to state 10
    POSITION_Y      shift and go to state 11
    ORIENTATION     shift and go to state 12
    VELOCITY        shift and go to state 13
    LOCALIZATION_ERROR shift and go to state 14
    DISTANCE        shift and go to state 15

    opargs                         shift and go to state 38
    operator                       shift and go to state 2
    comparison                     shift and go to state 3
    func                           shift and go to state 8

state 17

    (6) operator -> ( opargs . ) UNTIL ( opargs )
    (7) operator -> ( opargs . ) IMPLIES ( opargs )
    (8) operator -> ( opargs . ) AND ( opargs )
    (9) operator -> ( opargs . ) OR ( opargs )

    )               shift and go to state 39


state 18

    (4) operator -> EVENTUALLY ( . opargs )
    (1) opargs -> . operator
    (2) opargs -> . comparison
    (3) operator -> . ALWAYS ( opargs )
    (4) operator -> . EVENTUALLY ( opargs )
    (5) operator -> . NOT ( opargs )
    (6) operator -> . ( opargs ) UNTIL ( opargs )
    (7) operator -> . ( opargs ) IMPLIES ( opargs )
    (8) operator -> . ( opargs ) AND ( opargs )
    (9) operator -> . ( opargs ) OR ( opargs )
    (10) comparison -> . func opbin FLOAT
    (11) comparison -> . FLOAT opbin func
    (12) comparison -> . func opbin func
    (23) func -> . POSITION_X NAME
    (24) func -> . POSITION_Y NAME
    (25) func -> . ORIENTATION NAME
    (26) func -> . VELOCITY NAME
    (27) func -> . LOCALIZATION_ERROR NAME
    (28) func -> . DISTANCE NAME NAME

    ALWAYS          shift and go to state 4
    EVENTUALLY      shift and go to state 6
    NOT             shift and go to state 7
    (               shift and go to state 5
    FLOAT           shift and go to state 9
    POSITION_X      shift and go to state 10
    POSITION_Y      shift and go to state 11
    ORIENTATION     shift and go to state 12
    VELOCITY        shift and go to state 13
    LOCALIZATION_ERROR shift and go to state 14
    DISTANCE        shift and go to state 15

    opargs                         shift and go to state 40
    operator                       shift and go to state 2
    comparison                     shift and go to state 3
    func                           shift and go to state 8

state 19

    (5) operator -> NOT ( . opargs )
    (1) opargs -> . operator
    (2) opargs -> . comparison
    (3) operator -> . ALWAYS ( opargs )
    (4) operator -> . EVENTUALLY ( opargs )
    (5) operator -> . NOT ( opargs )
    (6) operator -> . ( opargs ) UNTIL ( opargs )
    (7) operator -> . ( opargs ) IMPLIES ( opargs )
    (8) operator -> . ( opargs ) AND ( opargs )
    (9) operator -> . ( opargs ) OR ( opargs )
    (10) comparison -> . func opbin FLOAT
    (11) comparison -> . FLOAT opbin func
    (12) comparison -> . func opbin func
    (23) func -> . POSITION_X NAME
    (24) func -> . POSITION_Y NAME
    (25) func -> . ORIENTATION NAME
    (26) func -> . VELOCITY NAME
    (27) func -> . LOCALIZATION_ERROR NAME
    (28) func -> . DISTANCE NAME NAME

    ALWAYS          shift and go to state 4
    EVENTUALLY      shift and go to state 6
    NOT             shift and go to state 7
    (               shift and go to state 5
    FLOAT           shift and go to state 9
    POSITION_X      shift and go to state 10
    POSITION_Y      shift and go to state 11
    ORIENTATION     shift and go to state 12
    VELOCITY        shift and go to state 13
    LOCALIZATION_ERROR shift and go to state 14
    DISTANCE        shift and go to state 15

    opargs                         shift and go to state 41
    operator                       shift and go to state 2
    comparison                     shift and go to state 3
    func                           shift and go to state 8

state 20

    (10) comparison -> func opbin . FLOAT
    (12) comparison -> func opbin . func
    (23) func -> . POSITION_X NAME
    (24) func -> . POSITION_Y NAME
    (25) func -> . ORIENTATION NAME
    (26) func -> . VELOCITY NAME
    (27) func -> . LOCALIZATION_ERROR NAME
    (28) func -> . DISTANCE NAME NAME

    FLOAT           shift and go to state 43
    POSITION_X      shift and go to state 10
    POSITION_Y      shift and go to state 11
    ORIENTATION     shift and go to state 12
    VELOCITY        shift and go to state 13
    LOCALIZATION_ERROR shift and go to state 14
    DISTANCE        shift and go to state 15

    func                           shift and go to state 42

state 21

    (13) opbin -> + .

    FLOAT           reduce using rule 13 (opbin -> + .)
    POSITION_X      reduce using rule 13 (opbin -> + .)
    POSITION_Y      reduce using rule 13 (opbin -> + .)
    ORIENTATION     reduce using rule 13 (opbin -> + .)
    VELOCITY        reduce using rule 13 (opbin -> + .)
    LOCALIZATION_ERROR reduce using rule 13 (opbin -> + .)
    DISTANCE        reduce using rule 13 (opbin -> + .)


state 22

    (14) opbin -> - .

    FLOAT           reduce using rule 14 (opbin -> - .)
    POSITION_X      reduce using rule 14 (opbin -> - .)
    POSITION_Y      reduce using rule 14 (opbin -> - .)
    ORIENTATION     reduce using rule 14 (opbin -> - .)
    VELOCITY        reduce using rule 14 (opbin -> - .)
    LOCALIZATION_ERROR reduce using rule 14 (opbin -> - .)
    DISTANCE        reduce using rule 14 (opbin -> - .)


state 23

    (15) opbin -> > .

    FLOAT           reduce using rule 15 (opbin -> > .)
    POSITION_X      reduce using rule 15 (opbin -> > .)
    POSITION_Y      reduce using rule 15 (opbin -> > .)
    ORIENTATION     reduce using rule 15 (opbin -> > .)
    VELOCITY        reduce using rule 15 (opbin -> > .)
    LOCALIZATION_ERROR reduce using rule 15 (opbin -> > .)
    DISTANCE        reduce using rule 15 (opbin -> > .)


state 24

    (16) opbin -> < .

    FLOAT           reduce using rule 16 (opbin -> < .)
    POSITION_X      reduce using rule 16 (opbin -> < .)
    POSITION_Y      reduce using rule 16 (opbin -> < .)
    ORIENTATION     reduce using rule 16 (opbin -> < .)
    VELOCITY        reduce using rule 16 (opbin -> < .)
    LOCALIZATION_ERROR reduce using rule 16 (opbin -> < .)
    DISTANCE        reduce using rule 16 (opbin -> < .)


state 25

    (17) opbin -> * .

    FLOAT           reduce using rule 17 (opbin -> * .)
    POSITION_X      reduce using rule 17 (opbin -> * .)
    POSITION_Y      reduce using rule 17 (opbin -> * .)
    ORIENTATION     reduce using rule 17 (opbin -> * .)
    VELOCITY        reduce using rule 17 (opbin -> * .)
    LOCALIZATION_ERROR reduce using rule 17 (opbin -> * .)
    DISTANCE        reduce using rule 17 (opbin -> * .)


state 26

    (18) opbin -> / .

    FLOAT           reduce using rule 18 (opbin -> / .)
    POSITION_X      reduce using rule 18 (opbin -> / .)
    POSITION_Y      reduce using rule 18 (opbin -> / .)
    ORIENTATION     reduce using rule 18 (opbin -> / .)
    VELOCITY        reduce using rule 18 (opbin -> / .)
    LOCALIZATION_ERROR reduce using rule 18 (opbin -> / .)
    DISTANCE        reduce using rule 18 (opbin -> / .)


state 27

    (19) opbin -> GTE .

    FLOAT           reduce using rule 19 (opbin -> GTE .)
    POSITION_X      reduce using rule 19 (opbin -> GTE .)
    POSITION_Y      reduce using rule 19 (opbin -> GTE .)
    ORIENTATION     reduce using rule 19 (opbin -> GTE .)
    VELOCITY        reduce using rule 19 (opbin -> GTE .)
    LOCALIZATION_ERROR reduce using rule 19 (opbin -> GTE .)
    DISTANCE        reduce using rule 19 (opbin -> GTE .)


state 28

    (20) opbin -> LEE .

    FLOAT           reduce using rule 20 (opbin -> LEE .)
    POSITION_X      reduce using rule 20 (opbin -> LEE .)
    POSITION_Y      reduce using rule 20 (opbin -> LEE .)
    ORIENTATION     reduce using rule 20 (opbin -> LEE .)
    VELOCITY        reduce using rule 20 (opbin -> LEE .)
    LOCALIZATION_ERROR reduce using rule 20 (opbin -> LEE .)
    DISTANCE        reduce using rule 20 (opbin -> LEE .)


state 29

    (21) opbin -> EQ .

    FLOAT           reduce using rule 21 (opbin -> EQ .)
    POSITION_X      reduce using rule 21 (opbin -> EQ .)
    POSITION_Y      reduce using rule 21 (opbin -> EQ .)
    ORIENTATION     reduce using rule 21 (opbin -> EQ .)
    VELOCITY        reduce using rule 21 (opbin -> EQ .)
    LOCALIZATION_ERROR reduce using rule 21 (opbin -> EQ .)
    DISTANCE        reduce using rule 21 (opbin -> EQ .)


state 30

    (22) opbin -> DIF .

    FLOAT           reduce using rule 22 (opbin -> DIF .)
    POSITION_X      reduce using rule 22 (opbin -> DIF .)
    POSITION_Y      reduce using rule 22 (opbin -> DIF .)
    ORIENTATION     reduce using rule 22 (opbin -> DIF .)
    VELOCITY        reduce using rule 22 (opbin -> DIF .)
    LOCALIZATION_ERROR reduce using rule 22 (opbin -> DIF .)
    DISTANCE        reduce using rule 22 (opbin -> DIF .)


state 31

    (11) comparison -> FLOAT opbin . func
    (23) func -> . POSITION_X NAME
    (24) func -> . POSITION_Y NAME
    (25) func -> . ORIENTATION NAME
    (26) func -> . VELOCITY NAME
    (27) func -> . LOCALIZATION_ERROR NAME
    (28) func -> . DISTANCE NAME NAME

    POSITION_X      shift and go to state 10
    POSITION_Y      shift and go to state 11
    ORIENTATION     shift and go to state 12
    VELOCITY        shift and go to state 13
    LOCALIZATION_ERROR shift and go to state 14
    DISTANCE        shift and go to state 15

    func                           shift and go to state 44

state 32

    (23) func -> POSITION_X NAME .

    +               reduce using rule 23 (func -> POSITION_X NAME .)
    -               reduce using rule 23 (func -> POSITION_X NAME .)
    >               reduce using rule 23 (func -> POSITION_X NAME .)
    <               reduce using rule 23 (func -> POSITION_X NAME .)
    *               reduce using rule 23 (func -> POSITION_X NAME .)
    /               reduce using rule 23 (func -> POSITION_X NAME .)
    GTE             reduce using rule 23 (func -> POSITION_X NAME .)
    LEE             reduce using rule 23 (func -> POSITION_X NAME .)
    EQ              reduce using rule 23 (func -> POSITION_X NAME .)
    DIF             reduce using rule 23 (func -> POSITION_X NAME .)
    $end            reduce using rule 23 (func -> POSITION_X NAME .)
    )               reduce using rule 23 (func -> POSITION_X NAME .)


state 33

    (24) func -> POSITION_Y NAME .

    +               reduce using rule 24 (func -> POSITION_Y NAME .)
    -               reduce using rule 24 (func -> POSITION_Y NAME .)
    >               reduce using rule 24 (func -> POSITION_Y NAME .)
    <               reduce using rule 24 (func -> POSITION_Y NAME .)
    *               reduce using rule 24 (func -> POSITION_Y NAME .)
    /               reduce using rule 24 (func -> POSITION_Y NAME .)
    GTE             reduce using rule 24 (func -> POSITION_Y NAME .)
    LEE             reduce using rule 24 (func -> POSITION_Y NAME .)
    EQ              reduce using rule 24 (func -> POSITION_Y NAME .)
    DIF             reduce using rule 24 (func -> POSITION_Y NAME .)
    $end            reduce using rule 24 (func -> POSITION_Y NAME .)
    )               reduce using rule 24 (func -> POSITION_Y NAME .)


state 34

    (25) func -> ORIENTATION NAME .

    +               reduce using rule 25 (func -> ORIENTATION NAME .)
    -               reduce using rule 25 (func -> ORIENTATION NAME .)
    >               reduce using rule 25 (func -> ORIENTATION NAME .)
    <               reduce using rule 25 (func -> ORIENTATION NAME .)
    *               reduce using rule 25 (func -> ORIENTATION NAME .)
    /               reduce using rule 25 (func -> ORIENTATION NAME .)
    GTE             reduce using rule 25 (func -> ORIENTATION NAME .)
    LEE             reduce using rule 25 (func -> ORIENTATION NAME .)
    EQ              reduce using rule 25 (func -> ORIENTATION NAME .)
    DIF             reduce using rule 25 (func -> ORIENTATION NAME .)
    $end            reduce using rule 25 (func -> ORIENTATION NAME .)
    )               reduce using rule 25 (func -> ORIENTATION NAME .)


state 35

    (26) func -> VELOCITY NAME .

    +               reduce using rule 26 (func -> VELOCITY NAME .)
    -               reduce using rule 26 (func -> VELOCITY NAME .)
    >               reduce using rule 26 (func -> VELOCITY NAME .)
    <               reduce using rule 26 (func -> VELOCITY NAME .)
    *               reduce using rule 26 (func -> VELOCITY NAME .)
    /               reduce using rule 26 (func -> VELOCITY NAME .)
    GTE             reduce using rule 26 (func -> VELOCITY NAME .)
    LEE             reduce using rule 26 (func -> VELOCITY NAME .)
    EQ              reduce using rule 26 (func -> VELOCITY NAME .)
    DIF             reduce using rule 26 (func -> VELOCITY NAME .)
    $end            reduce using rule 26 (func -> VELOCITY NAME .)
    )               reduce using rule 26 (func -> VELOCITY NAME .)


state 36

    (27) func -> LOCALIZATION_ERROR NAME .

    +               reduce using rule 27 (func -> LOCALIZATION_ERROR NAME .)
    -               reduce using rule 27 (func -> LOCALIZATION_ERROR NAME .)
    >               reduce using rule 27 (func -> LOCALIZATION_ERROR NAME .)
    <               reduce using rule 27 (func -> LOCALIZATION_ERROR NAME .)
    *               reduce using rule 27 (func -> LOCALIZATION_ERROR NAME .)
    /               reduce using rule 27 (func -> LOCALIZATION_ERROR NAME .)
    GTE             reduce using rule 27 (func -> LOCALIZATION_ERROR NAME .)
    LEE             reduce using rule 27 (func -> LOCALIZATION_ERROR NAME .)
    EQ              reduce using rule 27 (func -> LOCALIZATION_ERROR NAME .)
    DIF             reduce using rule 27 (func -> LOCALIZATION_ERROR NAME .)
    $end            reduce using rule 27 (func -> LOCALIZATION_ERROR NAME .)
    )               reduce using rule 27 (func -> LOCALIZATION_ERROR NAME .)


state 37

    (28) func -> DISTANCE NAME . NAME

    NAME            shift and go to state 45


state 38

    (3) operator -> ALWAYS ( opargs . )

    )               shift and go to state 46


state 39

    (6) operator -> ( opargs ) . UNTIL ( opargs )
    (7) operator -> ( opargs ) . IMPLIES ( opargs )
    (8) operator -> ( opargs ) . AND ( opargs )
    (9) operator -> ( opargs ) . OR ( opargs )

    UNTIL           shift and go to state 47
    IMPLIES         shift and go to state 48
    AND             shift and go to state 49
    OR              shift and go to state 50


state 40

    (4) operator -> EVENTUALLY ( opargs . )

    )               shift and go to state 51


state 41

    (5) operator -> NOT ( opargs . )

    )               shift and go to state 52


state 42

    (12) comparison -> func opbin func .

    $end            reduce using rule 12 (comparison -> func opbin func .)
    )               reduce using rule 12 (comparison -> func opbin func .)


state 43

    (10) comparison -> func opbin FLOAT .

    $end            reduce using rule 10 (comparison -> func opbin FLOAT .)
    )               reduce using rule 10 (comparison -> func opbin FLOAT .)


state 44

    (11) comparison -> FLOAT opbin func .

    $end            reduce using rule 11 (comparison -> FLOAT opbin func .)
    )               reduce using rule 11 (comparison -> FLOAT opbin func .)


state 45

    (28) func -> DISTANCE NAME NAME .

    +               reduce using rule 28 (func -> DISTANCE NAME NAME .)
    -               reduce using rule 28 (func -> DISTANCE NAME NAME .)
    >               reduce using rule 28 (func -> DISTANCE NAME NAME .)
    <               reduce using rule 28 (func -> DISTANCE NAME NAME .)
    *               reduce using rule 28 (func -> DISTANCE NAME NAME .)
    /               reduce using rule 28 (func -> DISTANCE NAME NAME .)
    GTE             reduce using rule 28 (func -> DISTANCE NAME NAME .)
    LEE             reduce using rule 28 (func -> DISTANCE NAME NAME .)
    EQ              reduce using rule 28 (func -> DISTANCE NAME NAME .)
    DIF             reduce using rule 28 (func -> DISTANCE NAME NAME .)
    $end            reduce using rule 28 (func -> DISTANCE NAME NAME .)
    )               reduce using rule 28 (func -> DISTANCE NAME NAME .)


state 46

    (3) operator -> ALWAYS ( opargs ) .

    $end            reduce using rule 3 (operator -> ALWAYS ( opargs ) .)
    )               reduce using rule 3 (operator -> ALWAYS ( opargs ) .)


state 47

    (6) operator -> ( opargs ) UNTIL . ( opargs )

    (               shift and go to state 53


state 48

    (7) operator -> ( opargs ) IMPLIES . ( opargs )

    (               shift and go to state 54


state 49

    (8) operator -> ( opargs ) AND . ( opargs )

    (               shift and go to state 55


state 50

    (9) operator -> ( opargs ) OR . ( opargs )

    (               shift and go to state 56


state 51

    (4) operator -> EVENTUALLY ( opargs ) .

    $end            reduce using rule 4 (operator -> EVENTUALLY ( opargs ) .)
    )               reduce using rule 4 (operator -> EVENTUALLY ( opargs ) .)


state 52

    (5) operator -> NOT ( opargs ) .

    $end            reduce using rule 5 (operator -> NOT ( opargs ) .)
    )               reduce using rule 5 (operator -> NOT ( opargs ) .)


state 53

    (6) operator -> ( opargs ) UNTIL ( . opargs )
    (1) opargs -> . operator
    (2) opargs -> . comparison
    (3) operator -> . ALWAYS ( opargs )
    (4) operator -> . EVENTUALLY ( opargs )
    (5) operator -> . NOT ( opargs )
    (6) operator -> . ( opargs ) UNTIL ( opargs )
    (7) operator -> . ( opargs ) IMPLIES ( opargs )
    (8) operator -> . ( opargs ) AND ( opargs )
    (9) operator -> . ( opargs ) OR ( opargs )
    (10) comparison -> . func opbin FLOAT
    (11) comparison -> . FLOAT opbin func
    (12) comparison -> . func opbin func
    (23) func -> . POSITION_X NAME
    (24) func -> . POSITION_Y NAME
    (25) func -> . ORIENTATION NAME
    (26) func -> . VELOCITY NAME
    (27) func -> . LOCALIZATION_ERROR NAME
    (28) func -> . DISTANCE NAME NAME

    ALWAYS          shift and go to state 4
    EVENTUALLY      shift and go to state 6
    NOT             shift and go to state 7
    (               shift and go to state 5
    FLOAT           shift and go to state 9
    POSITION_X      shift and go to state 10
    POSITION_Y      shift and go to state 11
    ORIENTATION     shift and go to state 12
    VELOCITY        shift and go to state 13
    LOCALIZATION_ERROR shift and go to state 14
    DISTANCE        shift and go to state 15

    opargs                         shift and go to state 57
    operator                       shift and go to state 2
    comparison                     shift and go to state 3
    func                           shift and go to state 8

state 54

    (7) operator -> ( opargs ) IMPLIES ( . opargs )
    (1) opargs -> . operator
    (2) opargs -> . comparison
    (3) operator -> . ALWAYS ( opargs )
    (4) operator -> . EVENTUALLY ( opargs )
    (5) operator -> . NOT ( opargs )
    (6) operator -> . ( opargs ) UNTIL ( opargs )
    (7) operator -> . ( opargs ) IMPLIES ( opargs )
    (8) operator -> . ( opargs ) AND ( opargs )
    (9) operator -> . ( opargs ) OR ( opargs )
    (10) comparison -> . func opbin FLOAT
    (11) comparison -> . FLOAT opbin func
    (12) comparison -> . func opbin func
    (23) func -> . POSITION_X NAME
    (24) func -> . POSITION_Y NAME
    (25) func -> . ORIENTATION NAME
    (26) func -> . VELOCITY NAME
    (27) func -> . LOCALIZATION_ERROR NAME
    (28) func -> . DISTANCE NAME NAME

    ALWAYS          shift and go to state 4
    EVENTUALLY      shift and go to state 6
    NOT             shift and go to state 7
    (               shift and go to state 5
    FLOAT           shift and go to state 9
    POSITION_X      shift and go to state 10
    POSITION_Y      shift and go to state 11
    ORIENTATION     shift and go to state 12
    VELOCITY        shift and go to state 13
    LOCALIZATION_ERROR shift and go to state 14
    DISTANCE        shift and go to state 15

    opargs                         shift and go to state 58
    operator                       shift and go to state 2
    comparison                     shift and go to state 3
    func                           shift and go to state 8

state 55

    (8) operator -> ( opargs ) AND ( . opargs )
    (1) opargs -> . operator
    (2) opargs -> . comparison
    (3) operator -> . ALWAYS ( opargs )
    (4) operator -> . EVENTUALLY ( opargs )
    (5) operator -> . NOT ( opargs )
    (6) operator -> . ( opargs ) UNTIL ( opargs )
    (7) operator -> . ( opargs ) IMPLIES ( opargs )
    (8) operator -> . ( opargs ) AND ( opargs )
    (9) operator -> . ( opargs ) OR ( opargs )
    (10) comparison -> . func opbin FLOAT
    (11) comparison -> . FLOAT opbin func
    (12) comparison -> . func opbin func
    (23) func -> . POSITION_X NAME
    (24) func -> . POSITION_Y NAME
    (25) func -> . ORIENTATION NAME
    (26) func -> . VELOCITY NAME
    (27) func -> . LOCALIZATION_ERROR NAME
    (28) func -> . DISTANCE NAME NAME

    ALWAYS          shift and go to state 4
    EVENTUALLY      shift and go to state 6
    NOT             shift and go to state 7
    (               shift and go to state 5
    FLOAT           shift and go to state 9
    POSITION_X      shift and go to state 10
    POSITION_Y      shift and go to state 11
    ORIENTATION     shift and go to state 12
    VELOCITY        shift and go to state 13
    LOCALIZATION_ERROR shift and go to state 14
    DISTANCE        shift and go to state 15

    opargs                         shift and go to state 59
    operator                       shift and go to state 2
    comparison                     shift and go to state 3
    func                           shift and go to state 8

state 56

    (9) operator -> ( opargs ) OR ( . opargs )
    (1) opargs -> . operator
    (2) opargs -> . comparison
    (3) operator -> . ALWAYS ( opargs )
    (4) operator -> . EVENTUALLY ( opargs )
    (5) operator -> . NOT ( opargs )
    (6) operator -> . ( opargs ) UNTIL ( opargs )
    (7) operator -> . ( opargs ) IMPLIES ( opargs )
    (8) operator -> . ( opargs ) AND ( opargs )
    (9) operator -> . ( opargs ) OR ( opargs )
    (10) comparison -> . func opbin FLOAT
    (11) comparison -> . FLOAT opbin func
    (12) comparison -> . func opbin func
    (23) func -> . POSITION_X NAME
    (24) func -> . POSITION_Y NAME
    (25) func -> . ORIENTATION NAME
    (26) func -> . VELOCITY NAME
    (27) func -> . LOCALIZATION_ERROR NAME
    (28) func -> . DISTANCE NAME NAME

    ALWAYS          shift and go to state 4
    EVENTUALLY      shift and go to state 6
    NOT             shift and go to state 7
    (               shift and go to state 5
    FLOAT           shift and go to state 9
    POSITION_X      shift and go to state 10
    POSITION_Y      shift and go to state 11
    ORIENTATION     shift and go to state 12
    VELOCITY        shift and go to state 13
    LOCALIZATION_ERROR shift and go to state 14
    DISTANCE        shift and go to state 15

    opargs                         shift and go to state 60
    operator                       shift and go to state 2
    comparison                     shift and go to state 3
    func                           shift and go to state 8

state 57

    (6) operator -> ( opargs ) UNTIL ( opargs . )

    )               shift and go to state 61


state 58

    (7) operator -> ( opargs ) IMPLIES ( opargs . )

    )               shift and go to state 62


state 59

    (8) operator -> ( opargs ) AND ( opargs . )

    )               shift and go to state 63


state 60

    (9) operator -> ( opargs ) OR ( opargs . )

    )               shift and go to state 64


state 61

    (6) operator -> ( opargs ) UNTIL ( opargs ) .

    $end            reduce using rule 6 (operator -> ( opargs ) UNTIL ( opargs ) .)
    )               reduce using rule 6 (operator -> ( opargs ) UNTIL ( opargs ) .)


state 62

    (7) operator -> ( opargs ) IMPLIES ( opargs ) .

    $end            reduce using rule 7 (operator -> ( opargs ) IMPLIES ( opargs ) .)
    )               reduce using rule 7 (operator -> ( opargs ) IMPLIES ( opargs ) .)


state 63

    (8) operator -> ( opargs ) AND ( opargs ) .

    $end            reduce using rule 8 (operator -> ( opargs ) AND ( opargs ) .)
    )               reduce using rule 8 (operator -> ( opargs ) AND ( opargs ) .)


state 64

    (9) operator -> ( opargs ) OR ( opargs ) .

    $end            reduce using rule 9 (operator -> ( opargs ) OR ( opargs ) .)
    )               reduce using rule 9 (operator -> ( opargs ) OR ( opargs ) .)

