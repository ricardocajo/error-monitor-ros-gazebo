# Subscribers
{% set callback_args = [] -%}
{% set timeSync_args = [] -%}
{% for sub in subscribers -%}
from {{ sub.library }}.msg import {{ sub.msgtype }}
{{ sub.sub_name }}_sub = message_filters.Subscriber('{{ sub.topic }}', {{ sub.msgtype }})
{% do callback_args.append(sub.sub_name + '_msg') -%}
{% do timeSync_args.append(sub.sub_name + '_sub') -%}
{% endfor %}
def fetch_state({{ callback_args | join(',') }}):
    global state
    buffer_state = {}
    {% if sim_sub -%}
    # Get ModelStates indexes info
    model_states_indexes = {}
    for index,name in enumerate(model_states_msg.name):
        model_states_indexes[name] = index
    {% endif -%}
    # Save relevant info
    {% for var in var_list -%}
    {% if var.sub == 'position' or var.sub == 'velocity' -%}
    state['{{ var.name }}'] = model_states_msg.{{ var.arg }}[model_states_indexes['{{ var.object_name }}']].{{ var.arg_extra }}
    {% elif var.sub == 'localization_error' -%}
    #TODO implement localization_error func
    {% else -%}
    state['{{ var.name }}'] = {{ var.sub }}_msg.{{ var.arg }}
    {% endif -%}
    {% endfor -%}
    state = buffer_state
    
time_sync = message_filters.ApproximateTimeSynchronizer([{{ timeSync_args | join(',') }}], queue_size=1, slop=0.1, allow_headerless=True)
time_sync.registerCallback(fetch_state)