if __name__ == '__main__':
    try:
        rospy.init_node('{{ file_prefix }}')
        {% set timeSync_args = [] -%}
        {% for sub in subscribers -%}
        {{ sub.sub_name }}_sub = message_filters.Subscriber('{{ sub.topic }}', {{ sub.msgtype }})
        {% do timeSync_args.append(sub.sub_name + '_sub') -%}
        {% endfor -%}
        time_sync = message_filters.ApproximateTimeSynchronizer([{{ timeSync_args | join(',') }}], queue_size=1, slop=0.1, allow_headerless=True)
        time_sync.registerCallback(fetch_state)
        state, save_states = {}, []
        {% if eventually > 0 -%}{% set eventually_dic = [] -%}
        {% for i in range(eventually) -%}{% do eventually_dic.append('\'var_' ~ (i+1) ~ '\': [False,\'*Error message*\']') -%}{% endfor -%}
        eventually = {{'{'}}{{ eventually_dic | join(',') }}{{'}'}}
        {% endif -%}
        rate, timeout = rospy.Rate({{ rate }}), {{ timeout }}
        while not rospy.is_shutdown():
            if rospy.get_time() > timeout:
                {% if eventually > 0 -%}
                for bool_, err in eventually.values():
                    if not bool_:
                        raise rospy.exceptions.ROSInterruptException(err)
                {% endif -%}
                raise rospy.exceptions.ROSInterruptException('Timeout reached. Simulation ended without breaking any property.')
            update_state()
            verify_properties(save_states.copy())
        rospy.spin()
    except rospy.ROSInterruptException as e:
        print(e)
    finally:
        pass